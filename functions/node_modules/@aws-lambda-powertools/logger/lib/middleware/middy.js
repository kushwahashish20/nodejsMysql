"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLambdaContext = void 0;
const Logger_1 = require("../Logger");
/**
 * A middy middleware that adds the current Lambda invocation's context inside all log items.
 *
 * ## Usage
 *
 * @example
 * ```typescript
 * import { Logger, injectLambdaContext } from "@aws-lambda-powertools/logger";
 *
 * import middy from '@middy/core';
 *
 *
 * const logger = new Logger();
 *
 * const lambdaHandler = async (_event: any, _context: any) => {
 *     logger.info("This is an INFO log with some context");
 * };
 *
 *
 * export const handler = middy(lambdaHandler).use(injectLambdaContext(logger));
 * ```
 *
 * @param {Logger|Logger[]} target - The Tracer instance to use for tracing
 * @returns {middy.MiddlewareObj} - The middy middleware object
 */
const injectLambdaContext = (target, options) => {
    const loggers = target instanceof Array ? target : [target];
    const persistentAttributes = [];
    const injectLambdaContextBefore = async (request) => {
        loggers.forEach((logger) => {
            if (options && options.clearState === true) {
                persistentAttributes.push({ ...logger.getPersistentLogAttributes() });
            }
            Logger_1.Logger.injectLambdaContextBefore(logger, request.event, request.context, options);
        });
    };
    const injectLambdaContextAfterOrOnError = async () => {
        if (options && options.clearState === true) {
            loggers.forEach((logger, index) => {
                Logger_1.Logger.injectLambdaContextAfterOrOnError(logger, persistentAttributes[index], options);
            });
        }
    };
    return {
        before: injectLambdaContextBefore,
        after: injectLambdaContextAfterOrOnError,
        onError: injectLambdaContextAfterOrOnError
    };
};
exports.injectLambdaContext = injectLambdaContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9taWRkeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBbUM7QUFJbkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUNILE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxNQUF5QixFQUFFLE9BQXdCLEVBQXVCLEVBQUU7SUFFdkcsTUFBTSxPQUFPLEdBQUcsTUFBTSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVELE1BQU0sb0JBQW9CLEdBQW9CLEVBQUUsQ0FBQztJQUVqRCxNQUFNLHlCQUF5QixHQUFHLEtBQUssRUFBRSxPQUFzQixFQUFpQixFQUFFO1FBQ2hGLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRTtZQUNqQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBVSxLQUFLLElBQUksRUFBRTtnQkFDMUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsMEJBQTBCLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDdkU7WUFDRCxlQUFNLENBQUMseUJBQXlCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGLE1BQU0saUNBQWlDLEdBQUcsS0FBSyxJQUFtQixFQUFFO1FBQ2xFLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFjLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQ2hELGVBQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDekYsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxNQUFNLEVBQUUseUJBQXlCO1FBQ2pDLEtBQUssRUFBRSxpQ0FBaUM7UUFDeEMsT0FBTyxFQUFFLGlDQUFpQztLQUMzQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBR0Esa0RBQW1CIn0=